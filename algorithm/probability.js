/**
 * 5.概率算法思想
 概率算法依照概率统计的思路来求解问题，往往不能得到问题的精确解，但却在数值计算领域得到了广泛的应用。因为很多数学问题，往往没有或者很难计算解析解，这时便需要通过数值计算来求解近似值。

 基本算法思想
 概率算法执行的基本过程如下：
 (1)将问题转化为相应的几何图形S, S 的面积是容易计算的，问题的结果往往对应几何图形中某一部分S1 的面积。
 (2)然后，向几何图形中随机撒点。
 (3)统计几何图形S 和 S1 中的点数。根 据 S 的面积和S1 面积的关系以及各图形中的点数来计算得到结果。
 (4) 判断上述结果是否在需要的精度之内，如果未达到精度则执行步骤(2)。如果达到精度,则输出近似结果。
 概率算法大致分为如下4 种形式。

 • 数值概率算法。
 • 蒙 特 卡 罗 （MonteCarlo)算法。
 • 拉 斯 维 加 斯 （Las Vegas)算法。
 • 舍 伍 德 （Sherwood)算法。

 经典例子
 【蒙特卡罗PI概率算法问题】
 在边长为1的正方形内，以1为半径画一个1/4圆。落入圆内的概率为PI/4？
 算法思想：在某面积范围内撒点足够多，落在固定区域的点的概率就会将近结果。
 关键：均匀撒点、区域判断

 *
 * */

function MontePI(n){
    let PI;
    let x,y;
    let i,sum;
    sum=0;
   // srand(time(NULL));
    for(i=1;i<n;i++){
        x=Math.random();//在0-1之间产生一个随机数x
        y=Math.random();//在0-1之间产生一个随机数y
        if((x*x+y*y)<=1){//判断点是否在圆内
            sum++;//计数
        }
    }
    console.log(sum);
    PI= 4.0*sum/n;//计算PI
    return PI;
}


let n=500000;
console.log("蒙特卡罗概率PI=%f\n", MontePI(n));
